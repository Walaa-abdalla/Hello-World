# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
jobs:
  smoke-test:
    docker: 
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test 
          command: return 1
          # command: |
          #   URL="https://blog.udacity.com/"
          #   if curl -s --head ${URL}
          #   then
          #     return 0
          #   else
          #     return 1
          #   fi
      - destroy_environment
  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints:
                - "81:2d:c3:f9:57:9c:ba:50:29:40:92:06:fd:cb:87:06" 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
  my_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
  save_hello_world_output:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: save hello world output
          command: |
            echo "Hello World" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_output_file:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt

  print_hello:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: print hello
          command: "echo hello"
  print_world:
    docker:
      - image: cimg/base:stable #circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: print world
          command: "echo world"
  print_env_variable:
    docker:
      - image: cimg/base:stable
    steps:
      - run: echo $TEST_VAR
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  fail_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: exit 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      # - configure_infrastructure
      - create_infrastructure
      - smoke-test:
          requires:
            - create_infrastructure
      # - fail_job
      # - my_job
      # - save_hello_world_output
      # - print_output_file:
      #     requires: 
      #       - save_hello_world_output
      # - print_env_variable
      # - print_hello
      # - print_world:
      #     requires:
      #       - print_hello
      # - say-hello
